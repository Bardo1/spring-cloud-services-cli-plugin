// Code generated by counterfeiter. DO NOT EDIT.
package resolverfakes

import (
	"sync"

	"github.com/pivotal-cf/spring-cloud-services-cli-plugin/instance"
)

type FakeManagementEndpointResolver struct {
	GetManagementEndpointStub        func(string, string, bool) (string, error)
	getManagementEndpointMutex       sync.RWMutex
	getManagementEndpointArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	getManagementEndpointReturns struct {
		result1 string
		result2 error
	}
	getManagementEndpointReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManagementEndpointResolver) GetManagementEndpoint(arg1 string, arg2 string, arg3 bool) (string, error) {
	fake.getManagementEndpointMutex.Lock()
	ret, specificReturn := fake.getManagementEndpointReturnsOnCall[len(fake.getManagementEndpointArgsForCall)]
	fake.getManagementEndpointArgsForCall = append(fake.getManagementEndpointArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetManagementEndpoint", []interface{}{arg1, arg2, arg3})
	fake.getManagementEndpointMutex.Unlock()
	if fake.GetManagementEndpointStub != nil {
		return fake.GetManagementEndpointStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getManagementEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManagementEndpointResolver) GetManagementEndpointCallCount() int {
	fake.getManagementEndpointMutex.RLock()
	defer fake.getManagementEndpointMutex.RUnlock()
	return len(fake.getManagementEndpointArgsForCall)
}

func (fake *FakeManagementEndpointResolver) GetManagementEndpointCalls(stub func(string, string, bool) (string, error)) {
	fake.getManagementEndpointMutex.Lock()
	defer fake.getManagementEndpointMutex.Unlock()
	fake.GetManagementEndpointStub = stub
}

func (fake *FakeManagementEndpointResolver) GetManagementEndpointArgsForCall(i int) (string, string, bool) {
	fake.getManagementEndpointMutex.RLock()
	defer fake.getManagementEndpointMutex.RUnlock()
	argsForCall := fake.getManagementEndpointArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManagementEndpointResolver) GetManagementEndpointReturns(result1 string, result2 error) {
	fake.getManagementEndpointMutex.Lock()
	defer fake.getManagementEndpointMutex.Unlock()
	fake.GetManagementEndpointStub = nil
	fake.getManagementEndpointReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManagementEndpointResolver) GetManagementEndpointReturnsOnCall(i int, result1 string, result2 error) {
	fake.getManagementEndpointMutex.Lock()
	defer fake.getManagementEndpointMutex.Unlock()
	fake.GetManagementEndpointStub = nil
	if fake.getManagementEndpointReturnsOnCall == nil {
		fake.getManagementEndpointReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getManagementEndpointReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManagementEndpointResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getManagementEndpointMutex.RLock()
	defer fake.getManagementEndpointMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManagementEndpointResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ instance.ManagementEndpointResolver = new(FakeManagementEndpointResolver)
